import {
    createContext,
    useContext,
    useState,
    useRef,
    useEffect,
    type ReactNode,
} from 'react';
import { useAuth } from './AuthContext';
import {
    getCartByUserId,
    addToCart,
    updateProductQuantity,
    // clearCartApi, // (Gi·∫£ s·ª≠ b·∫°n c√≥ h√†m n√†y)
} from '../api/cart';
import type { CartItem, CartType } from '../types/CartType';
import Swal from 'sweetalert2';

// Ki·ªÉu cho gi√° tr·ªã m√† Context s·∫Ω cung c·∫•p
interface ICartContext {
    cart: CartType[];
    loadCart: () => Promise<void>;
    AddToCart: (productId: number, quantity: number) => Promise<void>;
    updateQuantity: (productId: number, newQuantity: number) => void;
    clearCart: () => void;
    isCartLoading: boolean; // Th√™m state loading cho gi·ªè h√†ng
}

const CartContext = createContext<ICartContext | null>(null);

export const CartProvider = ({ children }: { children: ReactNode }) => {
    const { user } = useAuth(); // L·∫•y user t·ª´ AuthContext
    const [cart, setCart] = useState<CartType[]>([]);
    const [isCartLoading, setIsCartLoading] = useState(false);
    const debounceTimers = useRef<{ [key: string]: number }>({});

    const handleSuccess = () => {
        Swal.fire({
            title: "Th√†nh c√¥ng!",
            text: "Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng th√†nh c√¥ng üéâ",
            icon: "success",
            // confirmButtonText: "OK"
        });
    };

    const handleKeuDangNhap = () => {
        Swal.fire({
            title: "Th√¥ng b√°o!",
            text: "ƒêƒÉng nh·∫≠p ƒëi b ei",
            icon: "info",
            confirmButtonText: "OK"
        });
    };

    const loadCart = async () => {
        if (!user) return;
        setIsCartLoading(true);

        try {
            const flatItems: CartItem[] = await getCartByUserId();
            console.log(flatItems);

            //D√ôNG REDUCE ƒê·ªÇ GOM NH√ìM D·ªÆ LI·ªÜU L·∫†I
            const groupedData = flatItems.reduce((acc, item) => {
                const shopId = item.shop_id;

                // N·∫øu shop ch∆∞a c√≥ trong 'acc', t·∫°o nh√≥m m·ªõi
                if (!acc[shopId]) {
                    acc[shopId] = {
                        shop_id: shopId,
                        shop_name: item.shop_name,
                        logo_url: item.logo_url, // L·∫•y logo t·ª´ item
                        items: [],
                    };
                }

                // Th√™m item v√†o ƒë√∫ng nh√≥m shop
                acc[shopId].items.push(item);
                return acc;

            }, {} as { [key: number]: CartType }); // B·∫Øt ƒë·∫ßu v·ªõi object r·ªóng

            // 4. Chuy·ªÉn object ƒë√£ nh√≥m th√†nh m·∫£ng v√† G·ªåI SETCART
            // Gi·ªù 'data' l√† 'CartType[]', n√≥ kh·ªõp v·ªõi ki·ªÉu c·ªßa 'setCart'
            setCart(Object.values(groupedData));

        } catch (error) {
            console.error('L·ªói khi t·∫£i gi·ªè h√†ng:', error);
            setCart([]);
        } finally {
            setIsCartLoading(false);
        }
    };

    /**
     * T·ª± ƒë·ªông t·∫£i gi·ªè h√†ng khi user thay ƒë·ªïi (ƒëƒÉng nh·∫≠p)
     */
    useEffect(() => {
        if (user) {
            loadCart();
        } else {
            // N·∫øu user ƒëƒÉng xu·∫•t, x√≥a gi·ªè h√†ng
            setCart([]);
        }
    }, [user]);

    /**
     * Th√™m s·∫£n ph·∫©m v√†o gi·ªè (g·ªçi API, sau ƒë√≥ t·∫£i l·∫°i)
     */
    const AddToCart = async (productId: number, quantity: number) => {
        if (!user) {
            handleKeuDangNhap();
            return;
        }

        try {
            // 1. G·ªçi API (d√πng UPSERT - INSERT ON DUPLICATE)
            await addToCart(productId, quantity);
            handleSuccess();
            // 2. T·∫£i l·∫°i to√†n b·ªô gi·ªè h√†ng ƒë·ªÉ ƒë·ªìng b·ªô
            // (C√°ch n√†y ƒë·∫£m b·∫£o UI lu√¥n ƒë√∫ng 100% v·ªõi CSDL)
            await loadCart();
        } catch (error) {
            console.error('L·ªói khi th√™m v√†o gi·ªè:', error);
            // alert('Th√™m s·∫£n ph·∫©m th·∫•t b·∫°i');
        }
    };

    const updateQuantity = (productId: number, newQuantity: number) => {
        const finalQuantity = Math.max(newQuantity, 1);

        setCart((currentCart) => {
            return currentCart.map((shop) => ({
                ...shop,
                items: shop.items.map((item) =>
                    item.product_id === productId
                        ? { ...item, quantity: finalQuantity }
                        : item
                ),
            }));
        });

        // 2. Debounce API
        if (debounceTimers.current[productId]) {
            clearTimeout(debounceTimers.current[productId]);
        }

        debounceTimers.current[productId] = setTimeout(() => {
            console.log(`Debounce: G·ªçi API cho product ${productId}`);
            // G·ªçi API (PATCH) trong n·ªÅn
            updateProductQuantity(productId, finalQuantity)
                .then(() => {
                    console.log(`API Update th√†nh c√¥ng cho ${productId}`);
                })
                .catch((err) => {
                    // N·∫øu API l·ªói, t·∫£i l·∫°i gi·ªè h√†ng t·ª´ CSDL ƒë·ªÉ "rollback"
                    console.error('L·ªói c·∫≠p nh·∫≠t API:', err);
                    alert('C·∫≠p nh·∫≠t th·∫•t b·∫°i, ƒëang ƒë·ªìng b·ªô l·∫°i...');
                    loadCart();
                });
        }, 1500); // ƒê·ª£i 1.5 gi√¢y
    };

    /**
     * X√≥a to√†n b·ªô gi·ªè h√†ng (v√≠ d·ª•: sau khi thanh to√°n)
     */
    const clearCart = () => {
        setCart([]);
        // B·∫°n c≈©ng n√™n g·ªçi API ƒë·ªÉ x√≥a gi·ªè h√†ng trong CSDL
        // if (user) {
        //   clearCartApi(user.id).catch(err => console.error("L·ªói x√≥a CSDL gi·ªè h√†ng:", err));
        // }
    };

    // Gi√° tr·ªã cung c·∫•p cho c√°c component con
    const value = {
        cart,
        loadCart,
        AddToCart,
        updateQuantity,
        clearCart,
        isCartLoading,
    };

    return <CartContext.Provider value={value}>{children}</CartContext.Provider>;
};

// --- 6. T·∫†O HOOK T√ôY CH·ªàNH ---
/**
 * Hook t√πy ch·ªânh ƒë·ªÉ s·ª≠ d·ª•ng CartContext
 */
export const useCart = () => {
    const context = useContext(CartContext);
    if (context === null) {
        throw new Error('useCart ph·∫£i ƒë∆∞·ª£c s·ª≠ d·ª•ng b√™n trong CartProvider');
    }
    return context;
};